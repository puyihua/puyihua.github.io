<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Puyh</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Puyh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;College Student in ECUST, Shanghai, China&lt;/li&gt;
&lt;li&gt;Coding, Python, Machine Learning, Electronic Device&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wubba lubba dub dub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/puyihua&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Python3 relearning notebook [1]</title>
      <link>http://localhost:1313/post/2018-4-2/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/2018-4-2/</guid>
      
        <description>

&lt;h1 id=&#34;generator&#34;&gt;Generator&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = (x*x for x in range(1,10))
next(g)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in g:
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4
9
16
25
36
49
64
81
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def fib(max):
    n,a,b = 0,0,1
    while(n&amp;lt;max):
        yield b
        a,b = b, a+b
        n = n+1
    return &#39;done&#39;
f = fib(6)
for i in f:
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
1
2
3
5
8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import numpy as np

x = np.arange(20)
y = x**2

plt.plot(x, y)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x11bdb46d8&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_5_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a=2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(2):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print (1.2 - 1.0 == 0.2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1.2-1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.19999999999999996
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 1
b = 2
c = 3
d = a if a&amp;gt;b else b
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def triangles():
    L=[1]
    while True:
        yield L
        L.append(0)
        L = [L[i-1]+L[i] for i in range(len(L))]
        #L.pop()
    return &#39;done&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n = 0
results = []
for t in triangles():
    print(t)
    results.append(t)
    n = n + 1
    if n == 10:
        break
if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print(&#39;测试通过!&#39;)
else:
    print(&#39;测试失败!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1]
[1, 1]
[1, 2, 1]
[1, 3, 3, 1]
[1, 4, 6, 4, 1]
[1, 5, 10, 10, 5, 1]
[1, 6, 15, 20, 15, 6, 1]
[1, 7, 21, 35, 35, 21, 7, 1]
[1, 8, 28, 56, 70, 56, 28, 8, 1]
[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
测试通过!
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(results)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1, 0], [1, 1, 0], [1, 2, 1, 0], [1, 3, 3, 1, 0], [1, 4, 6, 4, 1, 0], [1, 5, 10, 10, 5, 1, 0], [1, 6, 15, 20, 15, 6, 1, 0], [1, 7, 21, 35, 35, 21, 7, 1, 0], [1, 8, 28, 56, 70, 56, 28, 8, 1, 0], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么results的输出末尾带0？我来回答！&lt;/p&gt;

&lt;p&gt;在我的电脑中，results的结果是：&lt;/p&gt;

&lt;p&gt;[[1, 0], [1, 1, 0], [1, 2, 1, 0], [1, 3, 3, 1, 0], [1, 4, 6, 4, 1, 0], [1, 5, 10, 10, 5, 1, 0], [1, 6, 15, 20, 15, 6, 1, 0], [1, 7, 21, 35, 35, 21, 7, 1, 0], [1, 8, 28, 56, 70, 56, 28, 8, 1, 0], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]
通过观察，不难发现，第十个list：&lt;/p&gt;

&lt;p&gt;[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
末尾没有零。于是，似乎可以想到些什么，为什么最后一个正常呢？
再看一下调用triangles生成器的代码:&lt;/p&gt;

&lt;p&gt;for t in triangles():
    print(t)
    results.append(t)
    n = n + 1
    if n == 10:
        break
当执行第三句results.append(t)时，实际上，此时results中的List和t指向的List是同一个地址。所以，如果t发生变化，resluts中的List也会跟着变化。那么，t指向的List有没有发生变化呢？答案是有：
当再次执行到for t in triangles():时，生成器：&lt;/p&gt;

&lt;p&gt;def triangles():
    L = [1]
    while True:
        yield L
        L.append(0)
        L = [L[i - 1] + L[i] for i in range(len(L))]
里面的L.append(0)就会给t指向的List末端加0.所以&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def triangles():
    L=[1]
    while True:
        yield L
        tmp = L.copy()
        tmp.append(0)
        L = [tmp[i-1]+tmp[i] for i in range(len(tmp))]
        #L.pop()
    return &#39;done&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;iterator-iterable&#34;&gt;iterator &amp;amp; iterable&lt;/h1&gt;

&lt;p&gt;凡是可作用于for循环的对象都是Iterable类型；&lt;/p&gt;

&lt;p&gt;凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；&lt;/p&gt;

&lt;p&gt;集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in [1, 2, 3, 4, 5]:
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 首先获得Iterator对象:
it = iter([1, 2, 3, 4, 5])
# 循环:
while True:
    try:
        # 获得下一个值:
        x = next(it)
    except StopIteration:
        # 遇到StopIteration就退出循环
        break
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Data Mining - Learn Pandas</title>
      <link>http://localhost:1313/post/2017-8-29-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2017-8-29-pandas/</guid>
      
        <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from pandas.io.parsers import read_csv
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!ls
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;gender_submission.csv preData.ipynb         train.csv
ipython_log.py        test.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train_data = read_csv(&amp;quot;train.csv&amp;quot;)
test_date = read_csv(&amp;quot;test.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#print(train_data)
train_data.sample(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;PassengerId&lt;/th&gt;
      &lt;th&gt;Survived&lt;/th&gt;
      &lt;th&gt;Pclass&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;SibSp&lt;/th&gt;
      &lt;th&gt;Parch&lt;/th&gt;
      &lt;th&gt;Ticket&lt;/th&gt;
      &lt;th&gt;Fare&lt;/th&gt;
      &lt;th&gt;Cabin&lt;/th&gt;
      &lt;th&gt;Embarked&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;286&lt;/th&gt;
      &lt;td&gt;287&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;de Mulder, Mr. Theodore&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;30.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;345774&lt;/td&gt;
      &lt;td&gt;9.5&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;308&lt;/th&gt;
      &lt;td&gt;309&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Abelson, Mr. Samuel&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;30.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;P/PP 3381&lt;/td&gt;
      &lt;td&gt;24.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(train_data.shape)
print(len(train_data))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(891, 12)
891
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(train_data.columns)
print(train_data.dtypes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;PassengerId&#39;, &#39;Survived&#39;, &#39;Pclass&#39;, &#39;Name&#39;, &#39;Sex&#39;, &#39;Age&#39;, &#39;SibSp&#39;,
       &#39;Parch&#39;, &#39;Ticket&#39;, &#39;Fare&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;],
      dtype=&#39;object&#39;)
PassengerId      int64
Survived         int64
Pclass           int64
Name            object
Sex             object
Age            float64
SibSp            int64
Parch            int64
Ticket          object
Fare           float64
Cabin           object
Embarked        object
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = train_data[&#39;Name&#39;]
print(type(names))
print(type(train_data))
print(names.sample(2))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
753           Jonkoff, Mr. Lalio
414    Sundman, Mr. Johan Julian
Name: Name, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.sign(train_data[&#39;Survived&#39;].sample(10)))
print(train_data[&#39;Survived&#39;].sample(5).values)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;338    1
137    0
557    0
877    0
253    0
635    1
454    0
317    0
175    0
745    0
Name: Survived, dtype: int64
[0 1 1 0 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;last_index = train_data.index[-1]
print(train_data.loc[last_index])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;PassengerId                    891
Survived                         0
Pclass                           3
Name           Dooley, Mr. Patrick
Sex                           male
Age                             32
SibSp                            0
Parch                            0
Ticket                      370376
Fare                          7.75
Cabin                          NaN
Embarked                         Q
Name: 890, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train_data[&#39;Survived&#39;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count    891.000000
mean       0.383838
std        0.486592
min        0.000000
25%        0.000000
50%        0.000000
75%        1.000000
max        1.000000
Name: Survived, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#group
for name, group in train_data.sample(10).groupby(&#39;Sex&#39;):
    print(name)
    print(group)
    print()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;female
     PassengerId  Survived  Pclass  \
8              9         1       3   
651          652         1       2   
486          487         1       1   

                                                  Name     Sex   Age  SibSp  \
8    Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   
651                                Doling, Miss. Elsie  female  18.0      0   
486    Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)  female  35.0      1   

     Parch  Ticket     Fare Cabin Embarked  
8        2  347742  11.1333   NaN        S  
651      1  231919  23.0000   NaN        S  
486      0   19943  90.0000   C93        S  

male
     PassengerId  Survived  Pclass                          Name   Sex   Age  \
758          759         0       3  Theobald, Mr. Thomas Leonard  male  34.0   
658          659         0       2  Eitemiller, Mr. George Floyd  male  23.0   
188          189         0       3              Bourke, Mr. John  male  40.0   
332          333         0       1     Graham, Mr. George Edward  male  38.0   
62            63         0       1   Harris, Mr. Henry Birkhardt  male  45.0   
363          364         0       3               Asim, Mr. Adola  male  35.0   
21            22         1       2         Beesley, Mr. Lawrence  male  34.0   

     SibSp  Parch              Ticket      Fare Cabin Embarked  
758      0      0              363294    8.0500   NaN        S  
658      0      0               29751   13.0000   NaN        S  
188      1      1              364849   15.5000   NaN        Q  
332      0      1            PC 17582  153.4625   C91        S  
62       1      0               36973   83.4750   C83        S  
363      0      0  SOTON/O.Q. 3101310    7.0500   NaN        S  
21       0      0              248698   13.0000   D56        S  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train_data.sample(4)[[&#39;Name&#39;,&#39;Survived&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Survived&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;44&lt;/th&gt;
      &lt;td&gt;Devaney, Miss. Margaret Delia&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;98&lt;/th&gt;
      &lt;td&gt;Doling, Mrs. John T (Ada Julia Bone)&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;198&lt;/th&gt;
      &lt;td&gt;Madigan, Miss. Margaret &#34;Maggie&#34;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;340&lt;/th&gt;
      &lt;td&gt;Navratil, Master. Edmond Roger&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>MacOS Terminal Proxy with Shadowsocks</title>
      <link>http://localhost:1313/post/2018-3-26-terminal-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-3-26-terminal-proxy/</guid>
      
        <description>&lt;p&gt;Because of some regulations, it becomes more and more difficult to visit with abroad sites in China. The throughput with abroad IP is limited within a very low level, which is nearly unusable.&lt;/p&gt;

&lt;p&gt;Accordingly, I got some connect errors when I use some tools such as &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;conda&lt;/code&gt; to install packages.&lt;/p&gt;

&lt;p&gt;To solve this problem, I started to think whether I can use Shadowsocks as proxy for my Terminal. And luckily, I find some informing tutorials from Google.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mrdulin/blog/issues/18&#34;&gt;https://github.com/mrdulin/blog/issues/18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wido.me/sunteya/understand-bashrc-and-profile&#34;&gt;https://wido.me/sunteya/understand-bashrc-and-profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/38794015/pythons-requests-missing-dependencies-for-socks-support-when-using-socks5-fro&#34;&gt;https://stackoverflow.com/questions/38794015/pythons-requests-missing-dependencies-for-socks-support-when-using-socks5-fro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concretely, add &lt;code&gt;proxy=...&lt;/code&gt; and &lt;code&gt;unproxy=...&lt;/code&gt; in &lt;code&gt;~/.bashrc&lt;/code&gt;. To ensure &lt;code&gt;pip&lt;/code&gt; can use SOCKS5 proxy, type &lt;code&gt;pip install requests[socks]&lt;/code&gt;, and type &lt;code&gt;proxy&lt;/code&gt; to start our high-speed terminal experience. Btw, using &lt;code&gt;curl ip.cn&lt;/code&gt; to make sure your Terminal is on the proxy.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Python3 ReLearning Notebook 1</title>
      <link>http://localhost:1313/post/2018-4-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2018-4-1/</guid>
      
        <description>&lt;p&gt;#1. Code of String
&lt;strong&gt;ASCII&lt;/strong&gt;: use 8 bit to represent 256 characters including numbers, letters and punctuations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unicode&lt;/strong&gt;: usually use 2 bytes to represent all of the characters including letters from various languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uft-8&lt;/strong&gt;: &lt;em&gt;8-bit Unicode Transformation Format&lt;/em&gt;. A character in UTF8 can be from 1 to 4 bytes long. UTF-8 can represent any character in the Unicode standard. UTF-8 is backwards compatible with ASCII.&lt;/p&gt;

&lt;p&gt;#2. .encode() &amp;amp; .decode.()
&lt;strong&gt;bytes&lt;/strong&gt; b&amp;rsquo;123abc&amp;rsquo; per character(within ASCII) occupies one byte storage&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lsquo;xxx&amp;rsquo;.encode(&amp;lsquo;utf-8&amp;rsquo;)&lt;/strong&gt;: strings to bytes. &amp;lsquo;utf-8&amp;rsquo; is the coding format of &amp;lsquo;xxx&amp;rsquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&lt;code&gt;&#39;中文&#39;.encode(&#39;utf-8&#39;)&lt;/code&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;code&gt;b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&amp;lsquo;xxx&amp;rsquo;.decode(&amp;lsquo;utf-8&amp;rsquo;)&lt;/strong&gt;: bytes to format.
&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;code&gt;b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;.decode(&#39;utf-8&#39;)&lt;/code&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;code&gt;&#39;中文&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;#3. list
- &lt;code&gt;classmates = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]&lt;/code&gt;
- changeable, sortable
- index: 0 ~ len(list)-1
- classmates.append(&amp;lsquo;Adam&amp;rsquo;) : add to tail
- classmates.insert(1, &amp;lsquo;Jack&amp;rsquo;): add as classmates[1]
- classmates.pop() : return and delete the tail element&lt;/p&gt;

&lt;p&gt;#4. tuple
- &lt;code&gt;classmates = (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)&lt;/code&gt;
- no insert or append, unchangeable
- only 1 element in a tuple : &lt;code&gt;t = (1,)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;function will return a tuple, under this condition &lt;code&gt;return x,y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#5. input()
in the case: &lt;code&gt;s = input(&#39;blabla:&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;type(s) &amp;gt;&amp;gt;&amp;gt; strings !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;#6. dict(map) &amp;amp; sets
- dict is consisted of key-value elements, which requires the key is non-variable object
- sets &lt;code&gt;s = set([1, 2, 3])&lt;/code&gt;
- dict &lt;code&gt;d = {&#39;Michael&#39;: 95, &#39;Bob&#39;: 75, &#39;Tracy&#39;: 85}&lt;/code&gt;
- sets is almost dicts, but there are 2 difference
  1. there is no keys in sets
  2. sets can be regarded as math sets, &lt;code&gt;s1 &amp;amp; s2&lt;/code&gt;, &lt;code&gt;s1 | s2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;#7. Variable parameter (vary in the num of inputs)
&amp;gt; def calc(*numbers):
&amp;gt;    sum = 0
&amp;gt;    for n in numbers:
&amp;gt;       sum = sum + n * n
&amp;gt;    return sum&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nums = [1, 2, 3]
calc(*nums)
14
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Retrospect and Prospect in 2017</title>
      <link>http://localhost:1313/post/2017-02-06-retrospect-and-prospect-in-2017/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2017-02-06-retrospect-and-prospect-in-2017/</guid>
      
        <description>&lt;p&gt;最近老妈赴京照顾姐姐和小外甥女，我跟我奶奶投奔到了姑妈家。姑妈家在一个村子里，姑妈家永远干净整洁，走上将近一米高的台阶才能进门，一进门就是水泥地的院落，各种花草，长得都很茂盛，院落中间是姑父的茶台，一个大树的树根横躺在地上，上部被削出了一个平面，你不会认为这是一间某个村子里的平房，如果忽然把你扔进这里。&lt;/p&gt;

&lt;p&gt;小时候爸妈忙生意，把我托付给姑妈，姑妈和姑父对我都特别好，从小时候到现在，我超级喜欢吃姑妈做的饭，从小时候到现在。现在一出门，就是小时候玩耍的那条街，玩伴们早也记不住名字，更不能想象出现在的相貌，想必大部分都工作了吧。我爱这个地方，爱这整洁的院落，爱这勤劳的姑妈姑父。&lt;/p&gt;

&lt;p&gt;听了 &lt;em&gt;Castle on the Hill&lt;/em&gt; 之后，才发现，这些感情与感觉一直都在，越来越强，只是自己不知道，突然有一天被激发了出来，变成了这些文字。&lt;/p&gt;

&lt;p&gt;我想了想过去的一个学期，我的时间都花费在了哪里，可能平均下来每天待在宿舍要11个小时，吃饭要一个半小时，剩下的时间，如果没有课，就应该去图书馆了。去图书馆呢，刚开学时候我在忙课程和代码，后来项目退掉了，我在忙课程。过生日那天我决定给自己一份大礼，所以报了托福，所以从此之后，只要作业不是明天交，就学英语，后来眼看着期末来临自己课内课程跟英语都是一副死样，就恬不知耻的把托福推迟了，跟罗老师一样，fly a flag and then fuck it. 后来期末考试也只能是差强人意，英语也几乎忘光了。&lt;/p&gt;

&lt;p&gt;之前的一个学期，甚至一直到今天，我的自控力都处在一个很低的水平。时间花在了图书馆，是的那段时间我是在那里，可是真正在学习的时间可能并不多，其中高效的学习更是少之又少。二十多岁的青葱年华，借学习的名义，耗费在虚无缥缈之中，真是奢侈。我又有什么脸整天嚷嚷着梦想 嚷嚷着加州呢？我真是无耻。&lt;/p&gt;

&lt;p&gt;总之，失败。&lt;/p&gt;

&lt;p&gt;好像也发现了一些规律，三个学期，投入学习的程度差别还是挺大的，但是成绩基本上没啥变动，理工科90+不到100，社会主义课程3.7，英语体育直接干死我。这是一个小前提。&lt;/p&gt;

&lt;p&gt;最近在用TED练听力，今晚主要听了两个人的，讲的都很好很深刻。他们会说 我这儿有个故事 或者 我朋友发生了什么事。他们用故事来&lt;code&gt;substantiate their ideas&lt;/code&gt;, 这是一个传统的套路。而我在想，如果有一天，我要向谁传递一个想法，我也需要一个故事，我的故事从哪里来？整天待在图书馆的我，跟趣味绝缘的我，从哪儿来得到故事的灵感呢？&lt;/p&gt;

&lt;p&gt;下面这段是跟主题无关的骚话&lt;/p&gt;

&lt;p&gt;我又想了一下，我一般都需要传递什么想法，我想到了，我喜欢一个姑娘，我要向她传递这个想法。我要找一个故事，可我脑子里只能想起傅里叶和拉普拉斯变换，这不是不可用，对于本专业的姑娘你还可以通过讲题表达爱。我又想了一下，还是不要在本专业搞事了，都是天天见的同学，翻车了多尴尬。所以 &lt;code&gt;fuck u all, Laplace and Fourier&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;我不只是没有故事，而且还脱离趣味了。我其实本来就是一般无趣，现在变成了十分无趣。昨晚上，一个好朋友突然戳我，给了发了一个姑娘的照片，问我想不想搞事，我说，给我发一下她的朋友圈吧，我要文字的内容。后来朋友把我的朋友圈也截图给了那个姑娘，我才回头一看自己的朋友圈。妈的都是什么&amp;hellip;啊我在学习 啊我在想写代码 啊我拿了奖学金 啊我在学英语 啊我考试考瞎了 啊我发个神经病&amp;hellip;太无聊了。我自己都不爱看。更不要给别人看了。&lt;/p&gt;

&lt;p&gt;身边有趣的灵魂很多，他们跟有趣的人在一起，干有趣的事情，然后发一条有趣的朋友圈。但是有趣跟我没啥关系。我在过去的一年半的大学生活中迅速的脱离了有趣。而有趣的灵魂们一般不喜欢无趣的我，我在这种 &lt;em&gt;无趣隔离&lt;/em&gt; 当中变得越来越无趣了。&lt;/p&gt;

&lt;p&gt;其实有趣无趣，对我自己来讲，没有那么重要。但是这一阵子对我来说变得重要了。很多人的有趣的朋友圈，我看到之后，只是羡慕，没有感到多开心。但是有一个例外，这个人太有趣了，从头到尾，从我加她到现在，她的每一条朋友圈都好有意思，都让我看了感觉很开心，让我很期待。这就是传说中那种，有趣又好看的姑娘，而且还没有男朋友。说到这里，有趣对我来说，就又重要了一些。我应该不会主动去搞事，越是喜欢我越怂啊，但是还是有一种见贤思齐的冲动。&lt;strong&gt;我不能再这么无趣下去了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;过年了，跟家里的兄长都聊了不少，也刷了不少知乎，思想上还是有些改变的。大学不应该是图书馆和宿舍的两点一线，我应该保持GPA，也不能脱离趣味，我也觉得生活无聊，应该在学习之余，找点乐子。&lt;/p&gt;

&lt;p&gt;比如，找一个明媚的下午，坐上校车地铁，去哪个不知名的好看的地方，去拍照&lt;/p&gt;

&lt;p&gt;比如，在github上fork某个项目，然后贡献一下自己的代码&lt;/p&gt;

&lt;p&gt;比如，假期求着老哥老姐们出去玩的时候也带着我&lt;/p&gt;

&lt;p&gt;比如，规划好路线食宿，带着基友来一场轰轰烈烈的自由行&lt;/p&gt;

&lt;p&gt;还有，要听一场我喜欢的演唱会&lt;/p&gt;

&lt;p&gt;还有，如果锤子还在上海发新品，我要去当志愿者&lt;/p&gt;

&lt;p&gt;还有，喜欢的各种展啊，ces还是overpop，感兴趣就去吧&lt;/p&gt;

&lt;p&gt;对了，我还想自己租一间公寓，去宜家买点家具，放学了去南侧门，买点菜，然后回去自己按照菜谱做菜，开着外放唱自己喜欢的歌，最好再买个洗衣机&amp;hellip;&lt;/p&gt;

&lt;p&gt;最后，把学习英语当成是每日习惯。&lt;/p&gt;

&lt;p&gt;总之，work harder, play more.&lt;/p&gt;

&lt;p&gt;这篇post在Android平台上的MrHyde编辑并推送至github pages&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>jekyll初体验</title>
      <link>http://localhost:1313/post/2017-02-03-jekyll%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/2017-02-03-jekyll%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      
        <description>

&lt;h1 id=&#34;缘由&#34;&gt;缘由&lt;/h1&gt;

&lt;p&gt;我在debug的过程中遇到了各种问题，当我对错误信息进行搜索时，总是会在一些个人blog上得到巧妙的解答，这让我感觉blog不仅是记录自己的一个地方，也可以成为大牛们普度众生的方式。一种对blog的崇拜之情油然而生（当然很久之前我就有了让人尴尬的QQ blog）。我想，如果我以后成为了像他们一样酷的人，代码啊，照片啊，搞机经历啊，心路历程啊，需要有个地方来放一下，那么blog一定是不会少的。早晚都得有，那就趁着假期准备托福不务正业的时候把它给搞掉。&lt;/p&gt;

&lt;p&gt;还想说一下现在的blog名字，AWESOME TITLE，这个名字可能看起来有点僵硬，其实没有别的意思，只是觉得这个title本身就很awesome。当用jekyll生成站点的时候，它的默认标题上写着“Your awesome title”，哈哈，很懂事，很搞笑，我要留下来，恩，所以这个名字就这么来了。&lt;/p&gt;

&lt;p&gt;Uncle Wang，就是王叔叔，也就是隔壁老王吧。那里面有的是我的启蒙老师，有的是我的学长，有的是我的基友，他们都喜欢代码，现在或者以后也会有自己的blog，uncleWang的存在就是给他们的友情链接。如果非要问为啥用隔壁老王，我只能说那里面有一位带我入门的很强的学长姓王，但是他们跟我没有任何血缘上的关系。&lt;/p&gt;

&lt;h1 id=&#34;过程&#34;&gt;过程&lt;/h1&gt;

&lt;p&gt;让我用一句话总结搭建这个blog的过程，那就是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在平坦的路面上曲折前行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04 LTS (laptop)&lt;/li&gt;
&lt;li&gt;Ubuntu 14.04 LTS (server)&lt;/li&gt;
&lt;li&gt;Ruby 2.3.1p112&lt;/li&gt;
&lt;li&gt;jekyll 3.3.1&lt;/li&gt;
&lt;li&gt;Git 2.7.4&lt;/li&gt;
&lt;li&gt;Apache 2.4.12&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scientific Internet&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;本地搭建&#34;&gt;本地搭建&lt;/h2&gt;

&lt;p&gt;在本地的搭建可以说是十分简单的，只需要敲几条命令(当然了我说的是在类unix环境下)，一个jekyll site就诞生了。  主要的Reference: &lt;a href=&#34;https://jekyllrb.com/docs/quickstart/&#34;&gt;Jekyll Docs&lt;/a&gt;。直到这一步我的搞事之路还是顺利的。&lt;/p&gt;

&lt;h2 id=&#34;部署到-github-pages&#34;&gt;部署到 Github Pages&lt;/h2&gt;

&lt;p&gt;本地运行一下&lt;code&gt;bundle exex jekyll build&lt;/code&gt;，就可以在本机访问自己的blog啦。怎么把它挂到网上让别人也能看到呢？这就牵扯到部署(你就架个静态blog你好意思用这两个字？)了。我自己呢部署在了两个地方，Github Pages和我的个人域名puyh.pub (puyh-&amp;gt;pu艺华咯)。&lt;/p&gt;

&lt;p&gt;Github Pages的部署可以说的是相当简单的，你只需要按照&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;走一遍，然后再把你的jekyll目录add-commit-push到你的page repo，稍微等几秒，如果不出错，直接访问的pages就可以看到你的blog已经屹立在world wide web上了(md成就感爆棚啊)。&lt;/p&gt;

&lt;p&gt;然而并没有那么顺利，我进行了第四次对于&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/&#34;&gt;廖雪峰老师Git教程&lt;/a&gt;的学习(我是金鱼只有7s记忆蟹蟹)，把git又给重新学了一遍。&lt;/p&gt;

&lt;p&gt;后面我再说个人服务器部署的问题。&lt;/p&gt;

&lt;h2 id=&#34;主题&#34;&gt;主题&lt;/h2&gt;

&lt;p&gt;可能你会想了，我这个blog如此简洁(简陋)，还用啥主题？但是事实就是如此，我不仅用了，还在上下了一番功夫。&lt;/p&gt;

&lt;p&gt;一开始我是图省事的，看到了github settings里有几款自带的主题，我以为只要点点鼠标就可以用了十分的开心，结果点了之后网站崩掉。&lt;/p&gt;

&lt;p&gt;后来我发先，github自带的主题只有一个layout(翻译成模板感觉不太准确？)，就是&lt;code&gt;default.html&lt;/code&gt;(参见&lt;a href=&#34;https://github.com/pages-themes/cayman&#34;&gt;pages-themes/cayman&lt;/a&gt;)，但是你之前的网站已经用了&lt;code&gt;home.html&lt;/code&gt;,&lt;code&gt;pages.html&lt;/code&gt;等等layouts，而且自带的主题并没有&lt;code&gt;_include&lt;/code&gt;文件夹，所以默认主题的include全都挂掉。所以你的网站就跪掉(在repo commits里面看到跪掉的情况)。&lt;/p&gt;

&lt;p&gt;但是我不死心(钻牛角尖)，我偏要用github自带的主题(脑子有坑)，老子我自己写！恩，然后花了不少时间来改进这个主题。主要还是三件事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;overriding gem-based theme&lt;/li&gt;
&lt;li&gt;divding default.html into head.html,header.html&amp;hellip;&lt;/li&gt;
&lt;li&gt;using templates inheriting&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实都是一些微小的贡献。因为写过django，所以对于模板继承还是liquid语言都是比较熟悉的，改起来还是挺轻松的。&lt;/p&gt;

&lt;p&gt;到这里，这个blog已经是你看到的模样了。&lt;/p&gt;

&lt;h2 id=&#34;部署到puyh-pub&#34;&gt;部署到puyh.pub&lt;/h2&gt;

&lt;p&gt;这一部分是最坑的，我绕了很多路，当然学的东西也最多。&lt;/p&gt;

&lt;p&gt;首先在国内访问github是不稳定的，而且我手头有闲置的域名和服务器，所以如果我不部署到puyh，这是天理难容的。According to 历史的进程，我不能让国内的朋友们借梯子来访问我的私人blog。&lt;br /&gt;
首先要解决的问题就是，如何将你的site上传到你的服务器。前提是你的site目录已经是个本地的git仓库，你向github推送的时候用的也是git，所以这个问题是显然的，你用git将你的网站上传到服务器。那么接下来也是easy的，&lt;em&gt;你在服务器建个仓库，然后把你本地的sshkey添加到信任列表去，直接git，将apache的站点地址指向你的git仓库，这不就完了？&lt;/em&gt;&lt;strong&gt;很easy啊简直美滋滋&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;恩，这里就是第一个坑，关于git的。首先明白一个概念，&lt;strong&gt;git是一个管理版本的工具，并不是一个文件传递工具。&lt;/strong&gt;正常情况下，你在服务器上建的仓库是bare repo，也就是裸仓库，也就是说没有文件树，换句话说，&lt;strong&gt;你不能直接在你服务器的仓库上访问你push过去的文件。&lt;/strong&gt;要明白这一点，请google bare and none-bare repository。所以直接将站点地址指向git仓库的幻想就破灭了。&lt;/p&gt;

&lt;p&gt;对于第一个坑，jekyll docs里提供了一系列&lt;a href=&#34;https://jekyllrb.com/docs/deployment-methods/&#34;&gt;优雅的解法&lt;/a&gt;，我使用的是其中的&lt;code&gt;post-receive-hook&lt;/code&gt;。实际上，我的&lt;code&gt;xxx/xxx/xx.git/hooks&lt;/code&gt;是没有“post-receive”的，所以我换成了&amp;rdquo;post-update&amp;rdquo;。&lt;strong&gt;hooks实际上是一些shell脚本，所以要赋予它运行的权限和对写入相应目录的权限。&lt;/strong&gt;对于检验hooks是否有效，你可以使用&lt;code&gt;./hook-file-name&lt;/code&gt;测试一下。&lt;/p&gt;

&lt;p&gt;hook搞好之后，你往服务器push一下，你会发现在你服务器站点目录会直接出现，很好，实现了站点的自动部署，很强势。&lt;/p&gt;

&lt;p&gt;后面有一个稍微小一点的弯道。是关于apache的。我习惯性的用了&lt;code&gt;sudo apt-get install apache2&lt;/code&gt;来安装apache2。那么造成的后果就是它给我安装了能够适应我的系统的最新的apache版本。使用最新版面临的问题就是，你的参考资料是最少的，除了官方文档和近几个月的有关内容，其他的资料都是不可信的。然后我就投入了apache docs的怀抱。实际上他们对我这次建站没有什么太大的帮助，但是我还是发现了一个很棒的东西。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://httpd.apache.org/docs/2.4/en/getting-started.html&#34;&gt;Apache2.4-Getting Started&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;深入浅出的讲解一些http，域名解析，动态与静态文件的东西，我感觉受益匪浅。对于这次建站，只需要将apache2 conf文件的站点目录指向jekyll build的目录，可以说是最低层次的apache使用，具体怎么做我就不说了，反正我读官方文档没找出答案。&lt;/p&gt;

&lt;p&gt;当然，花费我最多时间的坑是关于gem和bundle的。神tm坑爹，bundle是用来实现gem(ruby语言中的各种模块)的版本管理的，以保证jekyll能够用到自己需要的版本的gem。这个是个神坑，但是如果你不像我这么蠢，一般是不会触发这个坑的。所以大嘎可以当做此事没有发生过。&lt;/p&gt;

&lt;h2 id=&#34;第一条post&#34;&gt;第一条post&lt;/h2&gt;

&lt;p&gt;jekyll默认支持markdown标记语言的，你看到的这篇东西就是我用markdown写的，jekyll会负责把它转换成排版整齐 形式齐全的html。所以我是直接用文本编辑器写的。这里我用的是&lt;strong&gt;Atom&lt;/strong&gt;，这玩意装在我电脑上好久了，我现在终于可以玩它了，很开心。一开始装Atom只是因为它长得好看，而且它的主页也做的很好看，这让我很动心。&lt;/p&gt;

&lt;p&gt;Atom功能强大，长得好看，能够满足我的各种需求，我怎么可能不玩它。当然也是初阶的玩法，我装了几个关于markdown的packages，所以我可以及时预览我的markdown博文，后面我装了一个tool-bar，记不住的markdown语法直接点一下就可以，很方便。再后来我学会了用atom的命令行(我不知道如何准确的称呼它)，所有功能都可以在其中键入，很方便。&lt;/p&gt;

&lt;p&gt;我也装了一个terminal插件，也不用来回切窗口的了&amp;hellip; 一些别的近代编辑器我也用过的，刚才说的这些东西在它们身上也可以实现，并不是Atom独有的，&lt;strong&gt;但是不管怎么样，我还是喜欢Atom。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;最后&#34;&gt;最后&lt;/h1&gt;

&lt;p&gt;这篇post写了不短时间，其实写的挺累的哎呀呀。但是还是幸福的，背上插满flag的老将军最终扳回一局。还有半个月就迎来托福一战了，坦诚的讲，我对自己的准备不满意。&lt;strong&gt;如果你能看到这里，我很感动，请你用微信告诉我(我还没在blog里写留言模块&amp;hellip;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;想想后面的日子，日日都是好日啊。这篇post，写给大家，也写给自己。
祝好～&lt;code&gt;PEACE!&lt;/code&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>